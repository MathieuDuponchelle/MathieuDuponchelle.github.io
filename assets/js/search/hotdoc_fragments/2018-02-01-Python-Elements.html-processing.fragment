fragment_downloaded_cb({"url":"2018-02-01-Python-Elements.html#processing","fragment":"Processing\nWe chose to generate samples in our do_create implementation for no\nparticular reason, the default implementation would call do_alloc then\ndo_fill, we should only have to implement the latter if we wished to\nuse that approach, as we have called GstBase.BaseSrc.set_blocksize in\nour set_caps implementation.\nI will not discuss the implementation details here, we generate an array\nof float samples forming a sine wave using numpy, and keep track of where\nthe waveform was at in the accumulator attribute, this is all pretty simple\nstuff.\nWe could of course generate the samples in a for loop, but performance would\nbe abysmal.\nThe interesting part here is that GstBaseSrc expects us to return a tuple\nmade of (Gst.FlowReturn.OK, output_buffer) if everything went well,\notherwise typically (Gst.FlowReturn.ERROR, None) if there was an issue\ngenerating the data.\nIt is the responsability of the create vmethod implementation to .. create\nthe output buffer, which is just what we do with\nGst.Buffer.new_wrapped (bytes(data)).\n"});