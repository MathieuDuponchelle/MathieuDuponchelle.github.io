fragment_downloaded_cb({"url":"2021-12-14-webrtcsink.html#future-prospects","fragment":"Future prospects\nIn no particular order, here is a wishlist for future improvements:\nImplementing the default signalling server as a rust crate. This will allow\nrunning the signalling server either standalone, or letting webrtcsink\ninstantiate it in process, thus reducing the amount of plumbing needed for\nbasic usage. In addition, that crate would expose a trait to let applications\nextend the default protocol without having to reimplement their own.\nSanitize the default protocol: at the moment it is an ugly mixture of JSON\nand plaintext, it does the job but could be nicer.\nMore congestion control algorithms: at the moment the element exposes a property\nto pick the congestion control method, either homegrown or disabled,\nimplementing more algorithms (for instance GCC, NADA or SCReAM) can't hurt.\nImplementing flexfec: this is a longstanding wishlist item for me, ULP FEC\nhas shortcomings that are addressed by flexfec, a GStreamer implementation would\nbe generally useful.\nHigh-level integration tests: I am not entirely sure what those would look like,\nbut the general idea would be to set up a peer connection from the element to\nvarious browsers, apply various network conditions, and verify that the output\nisn't overly garbled / frozen / poor quality. That is a very open-ended task\nbecause the various components involved can't be controlled in a fully\ndeterministic manner, and the tests should only act as a robust alarm mechanism\nand not try to validate the final output at the pixel level.\n\n\nImplementing the default signalling server as a rust crate. This will allow\nrunning the signalling server either standalone, or letting webrtcsink\ninstantiate it in process, thus reducing the amount of plumbing needed for\nbasic usage. In addition, that crate would expose a trait to let applications\nextend the default protocol without having to reimplement their own.\n\n\nSanitize the default protocol: at the moment it is an ugly mixture of JSON\nand plaintext, it does the job but could be nicer.\n\n\nMore congestion control algorithms: at the moment the element exposes a property\nto pick the congestion control method, either homegrown or disabled,\nimplementing more algorithms (for instance GCC, NADA or SCReAM) can't hurt.\n\n\nImplementing flexfec: this is a longstanding wishlist item for me, ULP FEC\nhas shortcomings that are addressed by flexfec, a GStreamer implementation would\nbe generally useful.\n\n\nHigh-level integration tests: I am not entirely sure what those would look like,\nbut the general idea would be to set up a peer connection from the element to\nvarious browsers, apply various network conditions, and verify that the output\nisn't overly garbled / frozen / poor quality. That is a very open-ended task\nbecause the various components involved can't be controlled in a fully\ndeterministic manner, and the tests should only act as a robust alarm mechanism\nand not try to validate the final output at the pixel level.\n\n\n"});