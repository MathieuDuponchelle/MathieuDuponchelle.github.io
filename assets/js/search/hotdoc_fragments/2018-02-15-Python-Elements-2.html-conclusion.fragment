fragment_downloaded_cb({"url":"2018-02-15-Python-Elements-2.html#conclusion","fragment":"Conclusion\nSome improvements could be made to this element:\nIt could, instead of averaging channels, use one matplotlib figure per channel,\nand overlap them, to provide an output similar to audacity. This would however\nintroduce a dependency between input and output formats!\nStyling is hardcoded, properties such as transparency, line-color, line-width,\netc.. could be exposed.\nmatplotlib is atrociously slow and not really meant for real-time usage. Some\neffort was made to optimize its usage (blit, thinning_factor), however\nperformance is still disappointing. vispy might be an alternative worth\nexploring.\nOn a more positive note, it should be noted that while our previous element\nhad a more capable equivalent (audiotestsrc), this element does not really\nhave one, and its implementation is satisfyingly concise!\nI don't have an idea yet for the next post in the series, the most interesting\nscientific python packages I can think of are machine-learning ones such as\ntensorflow, but I have no experience with these, ideally a new post should\nalso explore a different base class (GstAggregator, GstBaseSink?).\nSuggestions welcome!\n\n\nIt could, instead of averaging channels, use one matplotlib figure per channel,\nand overlap them, to provide an output similar to audacity. This would however\nintroduce a dependency between input and output formats!\n\n\nStyling is hardcoded, properties such as transparency, line-color, line-width,\netc.. could be exposed.\n\n\nmatplotlib is atrociously slow and not really meant for real-time usage. Some\neffort was made to optimize its usage (blit, thinning_factor), however\nperformance is still disappointing. vispy might be an alternative worth\nexploring.\n\n\n"});