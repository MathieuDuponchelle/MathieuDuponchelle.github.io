fragment_downloaded_cb({"url":"2020-10-09-SMPTE-2022-1-2D-Forward-Error-Correction-in-GStreamer.html#enter-the-2d-matrix","fragment":"Enter the (2D) matrix\nA straightforward application of the mechanism presented above is to simply\nconstruct and transmit a FEC packet for each set of N consecutive media\npackets.\nThis works well enough when packet loss is truly random, but a common\npattern of packet loss over UDP is burstiness, where packets may be\ntransmitted without loss for some time, then suddenly a few consecutive packets\ngo missing. It means that our mechanism will often fall short in such cases,\nas it relies on having at most one packet missing from a sequence of values.\nA neat sophistication introduced in this standard and adopted in 2022-5\nand flexfec is to think of packet sequences with an extra dimension,\ngoing from a linear approach:\nto a two-dimensional approach:\nWhere M are the protected media packets, RF are the \"row\" FEC packets,\napplied to consecutive packets, and CF are the \"column\" FEC packets, applied\nto sets of packets separated by a fixed interval, in the example above 3.\nLet's imagine some scenarios to see how this approach addresses bursty\nloss patterns:\nIf M2 and M9 are lost:\nThey can both be recovered thanks to row FEC (RF1, RF3), but if M2 and M3 are\nlost in a burst, row FEC is now useless:\nThat is where column FEC comes in handy, as M2 and M3 can still be recovered\nthanks to CF2 and CF3.\nAn interesting property of this scheme is that each dimension can\ncomplete the other:\nIt appears that we have some heavy packet loss, and that some packets may\nsimply not be recovered, for example M3 has its row FEC packet missing, and none\nof the media packets in its column have made it.\nHowever all hope is not lost:\nWe first recover M8 thanks to column FEC, which means we can now recover\nM9 with row FEC. M6 is also recoverable with row FEC: M3 can now be recovered\nthrough column FEC! That's pretty neat.\nAs with many other \"vague\" problems, there isn't necessarily a perfect dimension\nfor the matrix, it has to be determined empirically through trial and error,\nand potentially adapted depending on the particular network that data will be\ntransported across.\nFor reference, AWS MediaConnect uses a 10 by 10 matrix, and in my testing with\nthe netsim element, a 5 by 5 matrix worked well to address a 5 percent packet\nloss. netsim isn't however a faithful representation of a typical unreliable\nnetwork, as when using its drop-probability property packets will be randomly\ndropped.\n"});