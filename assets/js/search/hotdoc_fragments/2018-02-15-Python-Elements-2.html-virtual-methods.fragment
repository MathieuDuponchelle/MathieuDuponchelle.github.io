fragment_downloaded_cb({"url":"2018-02-15-Python-Elements-2.html#virtual-methods","fragment":"Virtual methods\nWhen inheriting from Gst.Element, negotiation is implemented by receiving\nand sending events and queries on the pads of the element.\nHowever, most if not all other GStreamer base classes take care of this\naspect, and instead let their subclasses optionally implement a set of\nvirtual methods adapted to the base class' purpose.\nIn the case of BaseTransform, the base class assumes that input and output\ncaps will depend on each other: imagine an element that would crop a video\nby a set number of pixels, it is easy to see that the resolution of the\noutput will depend on that of the input.\nWith that in mind, the virtual method we need to expose is the aptly-named\ndo_transform_caps:\nIn our case, there is no dependency between input and output: receiving\naudio with a given sample format will not cause it to output video in a\ndifferent resolution.\nConsequently, when asked to transform the caps of the sink pad, we simply\nneed to return the template of the source pad, potentially intersected\nwith the optional filter argument (this parameter is useful for reducing\nthe complexity of the overall negotiation process).\nAn example of an element where input and output are interdependent\nis videocrop.\nImplementing this virtual method is enough to make negotiation succeed\nif upstream and downstream elements have compatible capabilities, but\nif for example downstream also accepts a wide range of resolutions, the\ndefault behaviour of the base class will be to pick the smallest possible\nresolution.\nThis behaviour is known as fixating the caps, and BaseTransform exposes\na virtual method to let the subclass pick a sane default value in such cases:\nWe do not have a preferred input format, and as a consequence we use the\ndefault caps.fixate implementation.\nHowever if for example the element is offered to output its full resolution range,\nwe are going to try and pick the resolution closest to our preferred default,\nthis is what the calls to fixate_field_nearest_int achieve.\nThis will have no effect if the field is already fixated to a specific value.\nIf the field was set to a range not containing our preferred value, fixating\nwould result in picking the allowed value closest to it, for example given\nour preferred width 640 and the allowed range [800, 1200], the final value\nof the field would be 800:\nAll that remains to do is for the element to initialize its state based on\nthe result of the caps negotiation:\nThe meat of that function is omitted due to its sausage factory nature, amongst\nother things it creates a matplotlib figure with the correct size\n(set_size_inches is one of the worst API I've ever seen), initializes some\ncounters, a ringbuffer, etc ..\n"});