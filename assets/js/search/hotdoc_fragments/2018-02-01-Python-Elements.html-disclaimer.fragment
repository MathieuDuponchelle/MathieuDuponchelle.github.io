fragment_downloaded_cb({"url":"2018-02-01-Python-Elements.html#disclaimer","fragment":"Disclaimer\nWriting GStreamer elements in python is usually a terrible idea:\nPython is slow, actual data processing should be avoided at all cost,\nand instead delegated to C libraries such as numpy, which is exactly what\nwe'll do in this part.\nThe infamous GIL enforces serialization, which means python elements will\nnot be able to take advantage of the multithreading capabilities of modern\nplatforms.\nThe only valid reasons for ignoring these restrictions are, to the best of\nmy knowledge:\nPython is the only language you know how to use.\nYou want to use a python package that has no equivalent elsewhere, for\nexample for scientific computing.\nPython rocks, and you don't intend to do anything CPU-intensive anyway.\nAll of the above.\nThe obvious recommendation these days, if you do not want to deal with\nlow-level concerns such as data races and memory safety, is Rust. More\ninformation can be found here and in\nthis series of posts from Sebastian Dr√∂ge.\nUpdate: Sebastian has published a post about the rust\nimplementation of an audio test source too!\n\n\nPython is slow, actual data processing should be avoided at all cost,\nand instead delegated to C libraries such as numpy, which is exactly what\nwe'll do in this part.\n\n\nThe infamous GIL enforces serialization, which means python elements will\nnot be able to take advantage of the multithreading capabilities of modern\nplatforms.\n\n\n\n\nPython is the only language you know how to use.\n\n\nYou want to use a python package that has no equivalent elsewhere, for\nexample for scientific computing.\n\n\nPython rocks, and you don't intend to do anything CPU-intensive anyway.\n\n\nAll of the above.\n\n\n"});