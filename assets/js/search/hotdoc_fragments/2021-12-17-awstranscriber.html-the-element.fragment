fragment_downloaded_cb({"url":"2021-12-17-awstranscriber.html#the-element","fragment":"The element\nIn GStreamer terms, the awstranscriber element is pretty straightforward: take\naudio in, push timed text out.\nThe Streaming API for AWS is (roughly) synchronous: past a 10 second buffer duration,\nthe service will only consume audio data in real time, I thus decided to make\nthe element a live one by:\nEvent handling is fairly light: The element doesn't need to handle seeks in\nany particular manner, only consumes and produces fixed caps, and can simply\ndisconnect from and reconnect to the service when it gets flushed.\nAs the element is designed for a live use case with a fixed maximum latency,\nit can't wait for complete sentences to be formed before pushing text out. And\nas one intended consumer for its output is closed captions, it also can't just\npush the same sentence multiple times as it is getting constructed, because that would\ncompletely overflow the CEA 608 bandwidth (more about that in later blog posts, but\nthink roughly 2 characters per video frame maximum).\nInstead, the goal is for the element to push one word (or punctuation symbol)\nat a time.\n\nsynchronizing its input to the clock\nreturning NO_PREROLL from its state change function\nreporting a latency\n\n"});